import React, { useState } from 'react';
import { StorageManager } from '../storage';

const Onboarding = ({ onComplete, user }) => {
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Veloxity!',
      subtitle: `–ü—Ä–∏–≤–µ—Ç, ${user.name}! üëã`,
      description: '–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.',
      icon: (
        <svg className="w-16 h-16 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
        </svg>
      )
    },
    {
      title: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã',
      subtitle: '–û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ –ª—é–¥–µ–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π',
      description: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, –¥–æ–±–∞–≤–ª—è–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ —Ä–æ–ª–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.',
      icon: (
        <svg className="w-16 h-16 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
        </svg>
      )
    },
    {
      title: '–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
      subtitle: '–û—Ç –∏–¥–µ–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
      description: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –¥–µ—Ä–∂–∏—Ç–µ –≤—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.',
      icon: (
        <svg className="w-16 h-16 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
        </svg>
      )
    },
    {
      title: '–ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏',
      subtitle: '–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å',
      description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.',
      icon: (
        <svg className="w-16 h-16 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 17a2 2 0 002-2v-4m6 0v6a2 2 0 002 2h2a2 2 0 002-2v-6M15 7h2a2 2 0 012 2v4m-2-6V5a2 2 0 00-2-2H5a2 2 0 00-2 2v2" />
        </svg>
      )
    },
    {
      title: '–í—Å–µ –≥–æ—Ç–æ–≤–æ!',
      subtitle: '–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
      description: '–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!',
      icon: (
        <svg className="w-16 h-16 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
        </svg>
      )
    }
  ];

  const currentStepData = steps[currentStep];
  const isLastStep = currentStep === steps.length - 1;

  const handleNext = () => {
    if (isLastStep) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      StorageManager.initializeTestData();
      onComplete();
    } else {
      setCurrentStep(prev => prev + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const handleSkip = () => {
    StorageManager.initializeTestData();
    onComplete();
  };

  return (
    <div className="min-h-screen flex items-center justify-center px-4 py-12">
      <div className="max-w-2xl w-full">
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-martian text-gray-600">
              –®–∞–≥ {currentStep + 1} –∏–∑ {steps.length}
            </span>
            <button
              onClick={handleSkip}
              className="text-sm font-martian text-gray-500 hover:text-gray-700 transition-colors duration-200"
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            </button>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-orange-500 to-red-500 h-2 rounded-full transition-all duration-500 ease-out"
              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
            ></div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="bg-white rounded-3xl shadow-xl border border-gray-100 p-8 md:p-12 text-center">
          {/* –ò–∫–æ–Ω–∫–∞ */}
          <div className="mb-8 flex justify-center">
            <div className="p-4 bg-gradient-to-br from-gray-50 to-gray-100 rounded-3xl shadow-inner">
              {currentStepData.icon}
            </div>
          </div>

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <h1 className="text-4xl md:text-5xl font-playfair font-bold text-gray-800 mb-4">
            {currentStepData.title}
          </h1>

          {/* –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <h2 className="text-xl md:text-2xl font-martian font-medium text-gray-600 mb-6">
            {currentStepData.subtitle}
          </h2>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <p className="text-gray-600 font-martian text-lg leading-relaxed max-w-xl mx-auto mb-12">
            {currentStepData.description}
          </p>

          {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
            {currentStep > 0 && (
              <button
                onClick={handlePrevious}
                className="px-8 py-3 border border-gray-300 text-gray-700 rounded-2xl font-martian font-medium transition-all duration-200 hover:bg-gray-50 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
              >
                –ù–∞–∑–∞–¥
              </button>
            )}
            
            <button
              onClick={handleNext}
              className="px-8 py-3 bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-2xl font-martian font-medium transition-all duration-200 hover:from-orange-600 hover:to-red-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
              {isLastStep ? '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' : '–î–∞–ª–µ–µ'}
            </button>
          </div>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ—á–µ–∫ */}
          <div className="flex justify-center space-x-2 mt-12">
            {steps.map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentStep(index)}
                className={`w-3 h-3 rounded-full transition-all duration-200 ${
                  index === currentStep
                    ? 'bg-orange-500 scale-125'
                    : index < currentStep
                    ? 'bg-orange-300'
                    : 'bg-gray-300'
                }`}
              />
            ))}
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-8 text-center">
          <p className="text-gray-500 font-martian text-sm">
            Veloxity –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –±—ã—Å—Ç—Ä–µ–µ
          </p>
        </div>
      </div>
    </div>
  );
};

export default Onboarding;